this.PricingCardsLayout=function(){"use strict";function p(a,e=null){let r="";switch(console.log("generateThemeCSS :",a),e){case"Pricing-Table":return a.branding&&(a.branding.primaryColor&&(r+=`--billhive-primary-color: ${a.branding.primaryColor};
    `),a.branding.backgroundColor&&(r+=`--billhive-background-color: ${a.branding.backgroundColor};
    `)),a.header&&(a.header.color&&(r+=`--billhive-header-text-color: ${a.header.color};
    `),a.header.fontSize&&(r+=`--billhive-header-font-size: ${a.header.fontSize}px;
    `),a.header.fontWeight&&(r+=`--billhive-header-font-weight: ${a.header.fontWeight};
    `)),a.card&&(a.card.backgroundColor&&(r+=`--billhive-card-background-color: ${a.card.backgroundColor};
    `),a.card.headerColor&&(r+=`--billhive-card-header-color: ${a.card.headerColor};
    `),a.card.textColor&&(r+=`--billhive-card-text-color: ${a.card.textColor};
    `),a.card.borderColor&&(r+=`--billhive-card-border-color: ${a.card.borderColor};
    `),a.card.headerFontSize&&(r+=`--billhive-card-header-font-size: ${a.card.headerFontSize}px;
    `),a.card.textFontSize&&(r+=`--billhive-card-text-font-size: ${a.card.textFontSize}px;
    `),a.card.headerFontWeight&&(r+=`--billhive-card-header-font-weight: ${a.card.headerFontWeight};
    `),a.card.shadow&&(r+=`--billhive-card-shadow: ${{small:"0 1px 3px rgba(0, 0, 0, 0.12)",medium:"0 4px 6px rgba(0, 0, 0, 0.1)",large:"0 10px 15px rgba(0, 0, 0, 0.1)"}[a.card.shadow]||a.card.shadow};
    `)),a.notes&&a.notes.fontSize&&(r+=`--billhive-font-size-foot-notes: ${a.notes.fontSize}px;
    `),`
    :host {
      ${r.trim()}
    }
  `}return a.theme&&typeof a.theme=="object"&&(a.theme.colors&&Object.entries(a.theme.colors).forEach(([t,o])=>{let i;switch(t){case"accent":i="--billhive-accent-color";break;case"header":i="--billhive-header-color";break;case"highlightPanel":i="--billhive-highlight-panel-color";break;case"card":i="--billhive-cards-color";break;case"inputComponent":i="--billhive-input-components-color";break;case"text":i="--billhive-text-color";break;case"subText":i="--billhive-sub-text-color";break;case"borders":i="--billhive-border-color";break;case"accentHover":i="--billhive-accent-hover";break;case"accentLight":i="--billhive-accent-light";break;default:i=`--billhive-${t.replace(/([A-Z])/g,"-$1").toLowerCase()}-color`}r+=`${i}: ${o};
    `}),a.theme.typography&&Object.entries(a.theme.typography).forEach(([t,o])=>{const i=`--billhive-${t.replace(/([A-Z])/g,"-$1").toLowerCase()}`;r+=`${i}: ${o};
    `}),a.theme.shadows&&Object.entries(a.theme.shadows).forEach(([t,o])=>{let i;switch(t){case"card":i="--billhive-card-shadow";break;case"modal":i="--billhive-modal-shadow";break;case"button":i="--billhive-button-shadow";break;default:i=`--billhive-${t}-shadow`}r+=`${i}: ${o};
    `}),a.layout&&(r+=`--billhive-layout: ${a.layout};
    `)),console.log("generateThemeCSS Response :",r),`
    :host {
      ${r.trim()}
    }
  `}const c={baseUrl:"http://localhost:4001",endpoints:{pricingTable:a=>`/products/${a}/pricing-table`,products:"/products",subscriptions:"/subscriptions"},headers:{"Content-Type":"application/json",Accept:"application/json"},getAuthHeaders(){return{...this.headers,"api-key":this.apiKey}},getPricingTableUrl(a=null){const e=a||this.productId;return`${this.baseUrl}${this.endpoints.pricingTable(e)}`}};typeof module<"u"&&module.exports&&(module.exports=c),typeof window<"u"&&(window.ApiConfig=c);class d extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.plans=[],this.allPlans=[],this.selectedPeriod=null,this.availablePeriods=[],this.isLoading=!1,this.apiError=null,this.theme=null,this.isCheckout=!1,this.productId="",this.apiKey="",this.buttonText="Select Plan",this.ratePlanConfig=null,this.currencyConfig=null,this.billingFrequencyConfig=null}static get observedAttributes(){return["data-theme","product-id","api-key","data-rate-plan-config","data-currency-config","data-billing-frequency-config"]}connectedCallback(){this.productId=this.getAttribute("product-id"),this.apiKey=this.getAttribute("api-key");const e=this.getAttribute("data-theme");if(e)try{const i=JSON.parse(e);this.theme=i}catch(i){console.error("Error parsing data-theme:",i)}const r=this.getAttribute("data-rate-plan-config");if(r)try{this.ratePlanConfig=JSON.parse(r)}catch(i){console.error("Error parsing data-rate-plan-config:",i)}const t=this.getAttribute("data-currency-config");if(t)try{this.currencyConfig=JSON.parse(t)}catch(i){console.error("Error parsing data-currency-config:",i)}const o=this.getAttribute("data-billing-frequency-config");if(o)try{this.billingFrequencyConfig=JSON.parse(o)}catch(i){console.error("Error parsing data-billing-frequency-config:",i)}console.log("PricingCardsLayout: === Pricing Cards Input Attributes ==="),console.log("PricingCardsLayout: product-id:",this.productId),console.log("PricingCardsLayout: api-key:",this.apiKey),console.log("PricingCardsLayout: theme:",this.theme),console.log("PricingCardsLayout: ratePlanConfig:",this.ratePlanConfig),console.log("PricingCardsLayout: currencyConfig:",this.currencyConfig),console.log("PricingCardsLayout: billingFrequencyConfig:",this.billingFrequencyConfig),console.log("PricingCardsLayout: ====================================="),this.loadPlansFromApi()}async loadPlansFromApi(){this.isLoading=!0,this.apiError=null,this.renderLoadingState();try{const e=`${c.baseUrl}/products/${this.productId}/pricing-table`;console.log("PricingCardsLayout: Fetching pricing data from:",e);const r=await fetch(e,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json","x-api-key":this.apiKey}});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);const t=await r.json();console.log("PricingCardsLayout: API Response:",t),this.allPlans=this.mergeApiDataWithTheme(t),this.setupPeriodFiltering(),this.isLoading=!1,this.isCheckout?this.loadPlanSelectorComponent().then(()=>{this.render()}).catch(o=>{console.error("Error loading plan-selector, falling back to buttons:",o),this.isCheckout=!1,this.render()}):this.render()}catch(e){console.error("Error fetching pricing data:",e),this.apiError=e.message,this.isLoading=!1,this.allPlans=[],this.renderErrorState()}}loadPlanSelectorComponent(){if(customElements.get("plan-selector"))return Promise.resolve();const e=document.querySelector('script[data-component="plan-selector"]');if(e)return new Promise(i=>{e.dataset.loaded==="true"?i():e.addEventListener("load",i)});const r=["./dist/web-components/plan-selector.min.js","../dist/web-components/plan-selector.min.js","/dist/web-components/plan-selector.min.js","dist/web-components/plan-selector.min.js"],t=document.currentScript||document.querySelector('script[src*="pricing-cards"]');let o=r[0];return t&&t.src&&(o=`${t.src.substring(0,t.src.lastIndexOf("/"))}/plan-selector.min.js`),new Promise((i,l)=>{const n=document.createElement("script");n.src=o,n.dataset.component="plan-selector",n.dataset.loaded="false",n.onload=()=>{n.dataset.loaded="true",console.log("PricingCardsLayout: Plan-selector component loaded successfully"),i()},n.onerror=()=>{console.error(`Failed to load plan-selector component from: ${o}`),l(new Error("Failed to load plan-selector component"))},document.head.appendChild(n)})}attributeChangedCallback(e,r,t){if(r!==t){if(console.log("PricingCardsLayout: attribute changed :",e,t),e==="data-theme")try{this.theme=JSON.parse(t)}catch(o){console.error("Error parsing data-theme:",o)}else if(e==="data-rate-plan-config")try{this.ratePlanConfig=JSON.parse(t)}catch(o){console.error("Error parsing data-rate-plan-config:",o)}else if(e==="data-currency-config")try{this.currencyConfig=JSON.parse(t)}catch(o){console.error("Error parsing data-currency-config:",o)}else if(e==="data-billing-frequency-config")try{this.billingFrequencyConfig=JSON.parse(t)}catch(o){console.error("Error parsing data-billing-frequency-config:",o)}this.render(),this.isCheckout?this.loadPlanSelectorComponent().then(()=>{this.render()}).catch(o=>{console.error("Error loading plan-selector, falling back to buttons:",o),this.isCheckout=!1,this.render()}):this.render()}}mergeApiDataWithTheme(e){if(!e||!Array.isArray(e))throw new Error("Invalid API data structure: expected an array");if(console.log("PricingCardsLayout: === Merging API Data with Theme ==="),console.log("PricingCardsLayout: API Data:",e),console.log("PricingCardsLayout: Rate Plan Config:",this.ratePlanConfig),!this.ratePlanConfig||!Array.isArray(this.ratePlanConfig))return console.log("PricingCardsLayout: No rate plan config to merge"),e.sort((t,o)=>(t.planLevel||0)-(o.planLevel||0));const r=e.map(t=>{const o=this.ratePlanConfig.find(i=>i.ratePlanId===t.ratePlanId);return o?(console.log(`PricingCardsLayout: Merging plan ${t.ratePlanPriceId}:`,{apiPlan:t,matchingConfig:o}),{...t,...o}):t});return console.log("PricingCardsLayout: Merged Plans Result:",r),r.sort((t,o)=>(t.planLevel||0)-(o.planLevel||0))}setupPeriodFiltering(){const e=new Map;this.allPlans.forEach(r=>{var i,l;const t=(i=r.billingPeriod)==null?void 0:i.id,o=(l=r.billingPeriod)==null?void 0:l.periodName;t&&o&&e.set(t,o)}),this.availablePeriods=Array.from(e.entries()).map(([r,t])=>({id:r,name:t})),this.selectedPeriod=this.availablePeriods.length>0?this.availablePeriods[0].id:null,this.filterPlansByPeriod()}filterPlansByPeriod(){this.selectedPeriod?this.plans=this.allPlans.filter(e=>{var r;return((r=e.billingPeriod)==null?void 0:r.id)===this.selectedPeriod}):this.plans=this.allPlans}handlePeriodChange(e){this.selectedPeriod=e,this.filterPlansByPeriod(),this.render()}getCurrencySymbol(e){return{USD:"$",EUR:"€",GBP:"£",INR:"₹",JPY:"¥",CAD:"C$",AUD:"A$",CHF:"CHF",CNY:"¥",SEK:"kr",NZD:"NZ$",MXN:"$",SGD:"S$",HKD:"HK$",NOK:"kr",TRY:"₺",RUB:"₽",BRL:"R$",ZAR:"R",KRW:"₩"}[e==null?void 0:e.toUpperCase()]||e||"$"}renderLoadingState(){this.shadowRoot.innerHTML=`
      ${this.getStyles()}
      <div class="pricing-display">
        <div class="loading-container">
          <div class="loading-spinner"></div>
          <p>Loading pricing plans...</p>
        </div>
      </div>
    `}renderErrorState(){this.shadowRoot.innerHTML=`
      ${this.getStyles()}
      <div class="pricing-display">
        <div class="error-container">
          <div class="error-icon">⚠️</div>
          <h3>Unable to load pricing plans</h3>
          <p>${this.apiError}</p>
          <button class="retry-btn" onclick="location.reload()">Retry</button>
        </div>
      </div>
    `}renderPeriodToggle(){return this.availablePeriods.length<=1?"":`
      <div class="period-toggle">
        <div class="period-buttons">
          ${this.availablePeriods.map(e=>`
            <button class="period-btn ${this.selectedPeriod===e.id?"active":""}" 
                    data-period-id="${e.id}">
              ${e.name}
            </button>
          `).join("")}
        </div>
      </div>
    `}handlePlanSelect(e){const r=new CustomEvent("plan-selected",{detail:{selectedPlan:e},bubbles:!0});this.dispatchEvent(r)}render(){var r;console.log("PricingCardsLayout: render function");const e=((r=this.theme.layout)==null?void 0:r.mode)==="grid";console.log("PricingCardsLayout: config check :",this.theme,e),this.shadowRoot.innerHTML=`
      ${this.getStyles()}
      <div class="pricing-display">
        <div class="nk-block-head-sub"></div>
        <div class="pricing-header">
          <h2 class="fw-normal">${this.theme.header.text}</h2>
          <p>${this.theme.header.description}</p>
        </div>
        ${this.renderPeriodToggle()}
        <div class="pricing-container">
          ${e?this.renderGridLayout():this.plans.map(t=>this.renderPlan(t)).join("")}
        </div>
      </div>
    `,this.shadowRoot.querySelectorAll(".btn-primary").forEach(t=>{t.addEventListener("click",o=>{const i=o.target.dataset.planId,l=this.plans.find(n=>n.id===i);this.handlePlanSelect(l)})}),this.shadowRoot.querySelectorAll(".period-btn").forEach(t=>{t.addEventListener("click",o=>{const i=o.target.dataset.periodId;this.handlePeriodChange(i)})})}renderGridLayout(){console.log("PricingCardsLayout: Render GRID");const e=new Set;this.plans.forEach(i=>{i.features&&Array.isArray(i.features)&&i.features.forEach(l=>e.add(l))});const r=Array.from(e),t=`<svg class="table-check-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="10" cy="10" r="9" fill="#10b981" stroke="#10b981" stroke-width="2"/>
      <path d="M6 10L9 13L14 7" stroke="white" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>`,o=`<svg class="table-cross-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M7 7L13 13M13 7L7 13" stroke="#9ca3af" stroke-width="2" stroke-linecap="round"/>
    </svg>`;return`
      <div class="pricing-table-wrapper">
        <table class="pricing-table">
          <thead>
            <tr class="table-header-row">
              <th class="table-header-feature">Plans & Features</th>
              ${this.plans.map(i=>`
                <th class="table-header-plan ${i.badge?"recommended":""}">
                  ${i.badge?`<span class="table-badge">${i.badgeText}</span>`:""}
                  <div class="table-plan-name">${i.name}</div>
                  <div class="table-plan-price">
                    <span class="table-currency">${this.getCurrencySymbol(i.currencyCode)}</span>
                    <span class="table-price-value">${i.price}</span>
                    <span class="table-period">/${i.period}</span>
                  </div>
                  <div class="table-plan-description">${i.description}</div>
                  <div class="table-plan-action">
                    ${this.isCheckout?`
                      <bh-plan-selector
                        data-plan-id="${i.id}"
                        data-plan-name="${i.name}"
                        data-plan-price="${i.price}"
                        data-plan-period="year"
                        data-recommended="${i.badge}"
                        data-button-text="${this.buttonText||"Get Started"}"
                      ></bh-plan-selector>
                    `:`
                      <button class="btn btn-primary table-btn" data-plan-id="${i.id}">
                        ${this.buttonText||"Get Started"}
                      </button>
                    `}
                  </div>
                </th>
              `).join("")}
            </tr>
          </thead>
          <tbody>
            ${r.map((i,l)=>`
              <tr class="table-feature-row">
                <td class="table-feature-name">${i}</td>
                ${this.plans.map(n=>{const s=n.features&&n.features.includes(i);return`
                    <td class="table-feature-value ${n.badge?"recommended-col":""}">
                      ${s?t:o}
                    </td>
                  `}).join("")}
              </tr>
            `).join("")}
          </tbody>
        </table>
      </div>
    `}renderPlan(e){var r,t;if(((r=this.theme.layout)==null?void 0:r.mode)==="card"){const o=`<svg class="feature-check-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="10" cy="10" r="10" fill="var(--billhive-accent-color, #6576ff)"/>
        <path d="M6 10L9 13L14 7" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>`,i=e.features||[];return`
        <div class="card card-bordered pricing text-center ${e.badge?"recommend":""}">
          ${e.badge?`<div class="pricing-strap">${e.badgeText}</div>`:""}
          <div class="pricing-body">
            <div class="pricing-title w-220px mx-auto">
              <h5 class="title">${e.name}</h5>
              <span class="sub-text">${e.description}</span>
            </div>
            <div class="pricing-amount">
              <div class="amount">
                ${this.getCurrencySymbol(e.currencyCode)}${e.price} <span>/${e.period}</span>
              </div>
              <span class="bill">${e.userNumber} User, Billed ${e.period}</span>
            </div>
            ${i.length>0?`
              <div class="pricing-features">
                <ul class="features-list">
                  ${i.map(l=>`
                    <li class="feature-item">
                      ${o}
                      <span>${l}</span>
                    </li>
                  `).join("")}
                </ul>
              </div>
            `:""}
          </div>
          <div class="pricing-action">
            ${this.isCheckout?`
              <bh-plan-selector
                data-plan-id="${e.id}"
                data-plan-name="${e.name}"
                data-plan-price="${e.price}"
                data-plan-period="year"
                data-recommended="${e.badge}"
                data-button-text="${this.buttonText||"Select Plan"}"
              ></bh-plan-selector>
            `:`
              <button class="btn btn-primary" data-plan-id="${e.id}">
                ${e.buttonText}
              </button>
            `}
          </div>
        </div>
      `}else if(((t=this.theme.layout)==null?void 0:t.mode)==="horizontal-card"){const o=`<svg class="feature-check-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="10" cy="10" r="10" fill="var(--billhive-accent-color, #6576ff)"/>
        <path d="M6 10L9 13L14 7" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>`,i=e.features||[];return`
        <div class="horizontal-card ${e.badge?"recommend":""}">
          ${e.badge?`<div class="pricing-strap">${e.badgeText}</div>`:""}
          <div class="horizontal-card-content">
            <div class="horizontal-card-left">
              <h3 class="horizontal-card-title">${e.name}</h3>
              <p class="horizontal-card-description">${e.description}</p>
              ${i.length>0?`
                <div class="horizontal-card-features">
                  <h4 class="features-heading">What's included</h4>
                  <ul class="features-list">
                    ${i.map(l=>`
                      <li class="feature-item">
                        ${o}
                        <span>${l}</span>
                      </li>
                    `).join("")}
                  </ul>
                </div>
              `:""}
            </div>
            <div class="horizontal-card-right">
              <div class="horizontal-card-pricing">
                <p class="pricing-label">Starting at</p>
                <div class="pricing-amount-horizontal">
                  <span class="currency-symbol">${this.getCurrencySymbol(e.currencyCode)}</span>
                  <span class="price-value">${e.price}</span>
                  <span class="period-text">/${e.period}</span>
                </div>
                <div class="pricing-action-horizontal">
                  ${this.isCheckout?`
                    <bh-plan-selector
                      data-plan-id="${e.id}"
                      data-plan-name="${e.name}"
                      data-plan-price="${e.price}"
                      data-plan-period="year"
                      data-recommended="${e.badge}"
                      data-button-text="${this.buttonText||"Select Plan"}"
                    ></bh-plan-selector>
                  `:`
                    <button class="btn btn-primary btn-horizontal" data-plan-id="${e.id}">
                      ${this.buttonText||"Start your trial"}
                    </button>
                  `}
                </div>
              </div>
            </div>
          </div>
        </div>
      `}else return""}getStyles(){var o,i,l,n,s,h,b,f,g;console.log("PricingCardsLayout: getStyles :",this.theme);const e=this.theme.card.shadow,r=this.theme.card.borderColor;this.theme.card.spacing;const t=this.theme.layout.columns;return`
      <style>
        ${p(this.theme,"Pricing-Table")}

        :host {
          display: block;
          font-family: var(--billhive-font-family, "Roboto", sans-serif, "Helvetica Neue", Arial, "Noto Sans");
        }

        * {
          box-sizing: border-box;
        }

        .pricing-display {
          padding: 1.5rem;
          background-color: var(--billhive-background-color, #ffffff);
        }

        .nk-block-head-sub {
          font-size: var(--billhive-font-size-sub-text, 0.55rem);
          text-transform: uppercase;
          color: var(--billhive-sub-text-color, #8094ae);
          font-weight: 500;
          letter-spacing: 0.06em;
          margin-bottom: 0.5rem;
          font-family: var(--billhive-font-family);
        }

        .pricing-header {
          margin-bottom: 2rem;
        }

        .pricing-header h2 {
          font-size: var(--billhive-header-font-size);
          color: var(--billhive-header-text-color, #364a63);
          margin: 0 0 0.5rem 0;
          font-weight: var(--billhive-header-font-weight, 400) !important;
          font-family: var(--billhive-font-family);
        }

        .fw-normal {
          font-weight: 400 !important;
        }

        .pricing-header p {
          color: var(--billhive-sub-text-color);
          margin: 0;
          font-size: var(--billhive-font-size-body-text, 0.65rem);
          font-family: var(--billhive-font-family);
        }

        .period-toggle {
          display: flex;
          justify-content: center;
          margin-bottom: 2rem;
        }

        .period-buttons {
          display: inline-flex;
          background-color: var(--billhive-disabled-color, #f5f6fa);
          border-radius: var(--billhive-element-border-radius, 6px);
          padding: 4px;
          gap: 2px;
        }

        .period-btn {
          padding: 8px 20px;
          border: none;
          background: transparent;
          color: var(--billhive-sub-text-color, #8094ae);
          font-size: var(--billhive-font-size-body-text, 0.65rem);
          font-weight: 500;
          border-radius: var(--billhive-element-border-radius, 4px);
          cursor: pointer;
          transition: all 0.2s ease;
          white-space: nowrap;
          font-family: var(--billhive-font-family);
        }

        .period-btn:hover {
          color: var(--billhive-text-color, #364a63);
          background-color: var(--billhive-accent-light, rgba(101, 118, 255, 0.1));
        }

        .period-btn.active {
          background-color: var(--billhive-accent-color, #6576ff);
          color: var(--billhive-header-color, #fff);
          box-shadow: var(--billhive-button-shadow, 0 2px 4px rgba(101, 118, 255, 0.3));
        }

        .period-btn.active:hover {
          background-color: var(--billhive-accent-hover, #5664e3);
          color: var(--billhive-header-color, #fff);
        }

        .pricing-container {
          display: ${((o=this.theme.layout)==null?void 0:o.mode)==="grid"?"block":((i=this.theme.layout)==null?void 0:i.mode)==="horizontal-card"||((l=this.theme.layout)==null?void 0:l.mode)==="list"?"flex":(((n=this.theme.layout)==null?void 0:n.mode)==="card","grid")};
          ${((s=this.theme.layout)==null?void 0:s.mode)==="horizontal-card"||((h=this.theme.layout)==null?void 0:h.mode)==="list"?"flex-direction: column;":((b=this.theme.layout)==null?void 0:b.mode)==="card"?`grid-template-columns: repeat(${t}, 1fr);`:((f=this.theme.layout)==null?void 0:f.mode)==="grid"?"":`grid-template-columns: repeat(${t}, 1fr);`}
          gap: ${((g=this.theme.layout)==null?void 0:g.mode)==="grid"?"0":this.theme.card.spacing}px;
          margin-bottom: 2rem;
          max-width: 1200px;
          margin-left: auto;
          margin-right: auto;
        }

        .card {
          position: relative;
          display: flex;
          flex-direction: column;
          min-width: 0;
          word-wrap: break-word;
          background-color: var(--billhive-card-background-color, #fff);
          background-clip: border-box;
          border: 1px solid ${r};
          border-radius: var(--billhive-element-border-radius, 15px);
          box-shadow: ${e};
        }

        .card-bordered {
          border: 1px solid ${r};
        }

        .pricing {
          position: relative;
          display: flex;
          flex-direction: column;
          height: 100%;
        }

        .pricing.text-center {
          text-align: center;
        }

        .pricing.recommend {
          position: relative;
        }

        .pricing-badge {
          position: absolute;
          top: 15px;
          right: 15px;
          background: var(--billhive-accent-color, #6576ff);
          color: var(--billhive-header-color, #fff);
          padding: 0.25rem 0.75rem;
          border-radius: var(--billhive-element-border-radius, 3px);
          font-size: var(--billhive-font-size-foot-notes, 0.55rem);
          font-weight: var(--billhive-header-font-weight, 600);
          text-transform: uppercase;
          letter-spacing: 0.01em;
          z-index: 1;
          display: inline-block;
          font-family: var(--billhive-font-family);
        }

        .pricing-strap {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          background: var(--billhive-primary-color, #6576ff);
          color: var(--billhive-header-color, #fff);
          padding: 0.5rem 1rem;
          font-size: var(--billhive-font-size-foot-notes, 0.55rem);
          font-weight: var(--billhive-header-font-weight, 700);
          text-transform: uppercase;
          letter-spacing: 0.05em;
          text-align: center;
          z-index: 1;
          border-top-left-radius: var(--billhive-element-border-radius, 15px);
          border-top-right-radius: var(--billhive-element-border-radius, 15px);
          font-family: var(--billhive-font-family);
        }

        .pricing.recommend .pricing-body {
          padding-top: 2.75rem;
        }

        .pricing-body {
          padding: 2.25rem 1rem;
          flex: 1;
          display: flex;
          flex-direction: column;
        }

        .pricing-title {
          margin-bottom: 1.75rem;
        }

        .w-220px {
          max-width: 220px;
          width: 100%;
        }

        .mx-auto {
          margin-left: auto !important;
          margin-right: auto !important;
        }

        .title {
          font-size: var(--billhive-card-header-font-size, 0.7rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-card-header-color, #364a63);
          margin: 0 0 0.25rem 0;
          font-family: var(--billhive-font-family);
          word-wrap: break-word;
          text-align: center;
        }

        .sub-text {
          display: block;
          color: var(--billhive-sub-text-color, #8094ae);
          font-size: var(--billhive-font-size-sub-text, 0.55rem);
          line-height: 1.4;
          font-family: var(--billhive-font-family);
          word-wrap: break-word;
          text-align: center;
        }

        .pricing-amount {
          margin-bottom: 1.75rem;
        }

        .amount {
          font-size: var(--billhive-font-size-heading, 0.8rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-accent-color, #526484);
          line-height: 1;
          margin-bottom: 0.5rem;
          font-family: var(--billhive-font-family);
        }

        .amount span {
          font-size: var(--billhive-font-size-body-text, 0.65rem);
          color: var(--billhive-sub-text-color, #8094ae);
          font-weight: 400;
        }

        .bill {
          display: block;
          color: var(--billhive-sub-text-color, #8094ae);
          font-size: var(--billhive-font-size-sub-text, 0.55rem);
          font-family: var(--billhive-font-family);
        }

        .pricing-features {
          margin-bottom: 1.5rem;
          padding: 0 1rem;
          flex: 1;
        }

        .pricing-features .features-list {
          list-style: none;
          padding: 0;
          margin: 0;
          text-align: left;
        }

        .pricing-features .feature-item {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          margin-bottom: 0.75rem;
          font-size: var(--billhive-card-text-font-size, 0.65rem);
          color: var(--billhive-card-text-color, #364a63);
          font-family: var(--billhive-font-family);
        }

        .pricing-features .feature-check-icon {
          flex-shrink: 0;
          width: 16px;
          height: 16px;
        }

        .pricing-action {
          padding: 1rem 1rem 1.5rem 1rem;
          margin-top: auto;
        }

        .pricing-action .btn {
          width: 100%;
          display: block;
        }

        .btn {
          display: inline-block;
          font-weight: var(--billhive-header-font-weight, 600);
          text-align: center;
          white-space: nowrap;
          vertical-align: middle;
          user-select: none;
          border: 1px solid transparent;
          padding: 0.4375rem 1.125rem;
          font-size: var(--billhive-font-size-body-text, 0.65rem);
          line-height: 1.5;
          border-radius: var(--billhive-element-border-radius, 4px);
          transition: all 0.15s ease-in-out;
          cursor: pointer;
          text-decoration: none;
          font-family: var(--billhive-font-family);
        }

        .btn-primary {
          color: var(--billhive-header-color, #fff);
          background-color: var(--billhive-accent-color, #6576ff);
          border-color: var(--billhive-accent-color, #6576ff);
        }

        .btn-primary:hover {
          color: var(--billhive-header-color, #fff);
          background-color: var(--billhive-accent-hover, #5664e3);
          border-color: var(--billhive-accent-hover, #5664e3);
          box-shadow: var(--billhive-button-shadow, 0 2px 4px rgba(101, 118, 255, 0.3));
        }

        .btn-primary:focus {
          outline: 0;
          box-shadow: var(--billhive-button-shadow, 0 0 0 0.2rem rgba(101, 118, 255, 0.25));
        }

        /* Horizontal Card Layout Styles */
        .horizontal-card {
          position: relative;
          background-color: var(--billhive-cards-color, #fff);
          border: 1px solid ${r};
          border-radius: var(--billhive-element-border-radius, 8px);
          box-shadow: ${e};
          overflow: hidden;
          transition: all 0.3s ease;
        }

        .horizontal-card:hover {
          box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
        }

        .horizontal-card.recommend {
          border-color: var(--billhive-accent-color, #6576ff);
          box-shadow: 0 4px 16px rgba(101, 118, 255, 0.15);
        }

        .horizontal-card-content {
          display: flex;
          flex-direction: row;
          min-height: 280px;
        }

        .horizontal-card.recommend .horizontal-card-content {
          padding-top: 2.5rem;
        }

        .horizontal-card-left {
          flex: 1;
          padding: 2.5rem;
          background-color: var(--billhive-cards-color, #fff);
        }

        .horizontal-card-right {
          width: 320px;
          padding: 2.5rem;
          background-color: var(--billhive-highlight-panel-color, #f5f6fa);
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .horizontal-card-title {
          font-size: var(--billhive-font-size-heading, 1.5rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-text-color, #364a63);
          margin: 0 0 1rem 0;
          font-family: var(--billhive-font-family);
        }

        .horizontal-card-description {
          font-size: var(--billhive-font-size-body-text, 0.95rem);
          color: var(--billhive-sub-text-color, #8094ae);
          line-height: 1.6;
          margin: 0 0 2rem 0;
          font-family: var(--billhive-font-family);
        }

        .horizontal-card-features {
          margin-top: 1.5rem;
        }

        .features-heading {
          font-size: var(--billhive-font-size-sub-text, 0.875rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-text-color, #364a63);
          margin: 0 0 1rem 0;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          font-family: var(--billhive-font-family);
        }

        .features-list {
          list-style: none;
          padding: 0;
          margin: 0;
        }

        .feature-item {
          display: flex;
          align-items: center;
          gap: 0.75rem;
          margin-bottom: 0.875rem;
          font-size: var(--billhive-font-size-body-text, 0.875rem);
          color: var(--billhive-text-color, #364a63);
          font-family: var(--billhive-font-family);
        }

        .feature-check-icon {
          flex-shrink: 0;
          width: 20px;
          height: 20px;
        }

        .horizontal-card-pricing {
          text-align: center;
          width: 100%;
        }

        .pricing-label {
          font-size: var(--billhive-font-size-sub-text, 0.75rem);
          color: var(--billhive-sub-text-color, #8094ae);
          text-transform: uppercase;
          letter-spacing: 0.05em;
          margin: 0 0 0.75rem 0;
          font-weight: 500;
          font-family: var(--billhive-font-family);
        }

        .pricing-amount-horizontal {
          display: flex;
          align-items: baseline;
          justify-content: center;
          margin-bottom: 2rem;
        }

        .currency-symbol {
          font-size: var(--billhive-font-size-heading, 1.5rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-accent-color, #6576ff);
          font-family: var(--billhive-font-family);
        }

        .price-value {
          font-size: var(--billhive-font-size-heading, 3rem);
          font-weight: var(--billhive-header-font-weight, 700);
          color: var(--billhive-accent-color, #6576ff);
          line-height: 1;
          font-family: var(--billhive-font-family);
        }

        .period-text {
          font-size: var(--billhive-font-size-body-text, 1rem);
          color: var(--billhive-sub-text-color, #8094ae);
          margin-left: 0.25rem;
          font-family: var(--billhive-font-family);
        }

        .pricing-action-horizontal {
          margin-top: 1.5rem;
        }

        .btn-horizontal {
          width: 100%;
          padding: 0.875rem 2rem;
          font-size: var(--billhive-font-size-body-text, 1rem);
          font-weight: var(--billhive-header-font-weight, 600);
        }

        /* Grid/Table Layout Styles */
        .pricing-table-wrapper {
          width: 100%;
          overflow-x: auto;
          margin-bottom: 2rem;
        }

        .pricing-table {
          width: 100%;
          border-collapse: collapse;
          background-color: var(--billhive-cards-color, #fff);
          border: 1px solid ${r};
          border-radius: var(--billhive-element-border-radius, 8px);
        }

        .table-header-row {
          border-bottom: 2px solid ${r};
        }

        .table-header-feature {
          padding: 1.5rem;
          text-align: left;
          font-size: var(--billhive-font-size-body-text, 0.875rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-text-color, #364a63);
          background-color: var(--billhive-highlight-panel-color, #f9fafb);
          border-right: 1px solid ${r};
          vertical-align: top;
          min-width: 200px;
          font-family: var(--billhive-font-family);
        }

        .table-header-plan {
          padding: 1.5rem;
          text-align: center;
          background-color: var(--billhive-cards-color, #fff);
          border-right: 1px solid ${r};
          vertical-align: top;
          min-width: 200px;
          position: relative;
        }

        .table-header-plan:last-child {
          border-right: none;
        }

        .table-header-plan.recommended {
          background-color: var(--billhive-accent-light, rgba(101, 118, 255, 0.03));
          border-left: 2px solid var(--billhive-accent-color, #6576ff);
          border-right: 2px solid var(--billhive-accent-color, #6576ff);
        }

        .table-badge {
          display: inline-block;
          background: var(--billhive-accent-color, #6576ff);
          color: var(--billhive-header-color, #fff);
          padding: 0.25rem 0.75rem;
          border-radius: var(--billhive-element-border-radius, 4px);
          font-size: var(--billhive-font-size-foot-notes, 0.7rem);
          font-weight: var(--billhive-header-font-weight, 600);
          text-transform: uppercase;
          letter-spacing: 0.05em;
          margin-bottom: 0.75rem;
          font-family: var(--billhive-font-family);
        }

        .table-plan-name {
          font-size: var(--billhive-font-size-heading, 1.25rem);
          font-weight: var(--billhive-header-font-weight, 700);
          color: var(--billhive-text-color, #364a63);
          margin: 0.75rem 0;
          font-family: var(--billhive-font-family);
        }

        .table-plan-price {
          display: flex;
          align-items: baseline;
          justify-content: center;
          margin: 1rem 0;
        }

        .table-currency {
          font-size: var(--billhive-font-size-heading, 1.25rem);
          font-weight: var(--billhive-header-font-weight, 600);
          color: var(--billhive-text-color, #364a63);
          font-family: var(--billhive-font-family);
        }

        .table-price-value {
          font-size: var(--billhive-font-size-heading, 2.5rem);
          font-weight: var(--billhive-header-font-weight, 800);
          color: var(--billhive-text-color, #364a63);
          line-height: 1;
          font-family: var(--billhive-font-family);
          margin: 0 0.25rem;
        }

        .table-period {
          font-size: var(--billhive-font-size-body-text, 0.875rem);
          color: var(--billhive-sub-text-color, #8094ae);
          font-family: var(--billhive-font-family);
        }

        .table-plan-description {
          font-size: var(--billhive-font-size-sub-text, 0.8rem);
          color: var(--billhive-sub-text-color, #8094ae);
          line-height: 1.5;
          margin: 0.75rem 0 1.25rem 0;
          padding: 0 1rem;
          min-height: 2.5rem;
          font-family: var(--billhive-font-family);
        }

        .table-plan-action {
          margin-top: 1rem;
        }

        .table-btn {
          width: 90%;
          padding: 0.75rem 1.5rem;
          font-size: var(--billhive-font-size-body-text, 0.875rem);
          font-weight: var(--billhive-header-font-weight, 600);
        }

        .table-feature-row {
          border-bottom: 1px solid ${r};
          transition: background-color 0.2s ease;
        }

        .table-feature-row:last-child {
          border-bottom: none;
        }

        .table-feature-row:hover {
          background-color: var(--billhive-highlight-panel-color, #f9fafb);
        }

        .table-feature-name {
          padding: 1rem 1.5rem;
          text-align: left;
          font-size: var(--billhive-font-size-body-text, 0.875rem);
          color: var(--billhive-text-color, #364a63);
          font-weight: 500;
          background-color: var(--billhive-highlight-panel-color, #f9fafb);
          border-right: 1px solid ${r};
          font-family: var(--billhive-font-family);
        }

        .table-feature-value {
          padding: 1rem;
          text-align: center;
          border-right: 1px solid ${r};
        }

        .table-feature-value:last-child {
          border-right: none;
        }

        .table-feature-value.recommended-col {
          background-color: var(--billhive-accent-light, rgba(101, 118, 255, 0.02));
        }

        .table-check-icon,
        .table-cross-icon {
          display: inline-block;
          vertical-align: middle;
          width: 20px;
          height: 20px;
        }

        @media (max-width: 991px) {
          .pricing-container:not(.horizontal-card):not(.table-layout) {
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)) !important;
          }

          .horizontal-card-content {
            flex-direction: column;
          }

          .horizontal-card-right {
            width: 100%;
          }

          .table-header-feature,
          .table-header-plan {
            min-width: 160px;
            padding: 1.25rem;
          }

          .table-plan-name {
            font-size: var(--billhive-font-size-heading, 1.125rem);
          }

          .table-price-value {
            font-size: var(--billhive-font-size-heading, 2rem);
          }
        }

        @media (max-width: 767px) {
          .pricing-container:not(.horizontal-card):not(.table-layout) {
            grid-template-columns: 1fr !important;
          }

          .pricing-body {
            padding: 1.5rem 1rem;
          }

          .amount {
            font-size: var(--billhive-font-size-heading, 0.8rem);
          }

          .pricing-table-wrapper {
            overflow-x: auto;
          }

          .pricing-table {
            min-width: 600px;
          }

          .table-header-feature,
          .table-header-plan {
            min-width: 140px;
            padding: 1rem;
          }

          .table-plan-name {
            font-size: var(--billhive-font-size-heading, 1rem);
          }

          .table-price-value {
            font-size: var(--billhive-font-size-heading, 1.75rem);
          }

          .table-currency {
            font-size: var(--billhive-font-size-heading, 1rem);
          }

          .table-plan-description {
            font-size: var(--billhive-font-size-sub-text, 0.75rem);
            min-height: auto;
            padding: 0 0.5rem;
          }

          .table-btn {
            padding: 0.625rem 1rem;
            font-size: var(--billhive-font-size-sub-text, 0.8rem);
          }

          .table-feature-name {
            font-size: var(--billhive-font-size-sub-text, 0.8rem);
            padding: 0.875rem 1rem;
          }

          .table-feature-value {
            padding: 0.875rem;
          }

          .table-check-icon,
          .table-cross-icon {
            width: 18px;
            height: 18px;
          }
        }

        /* Loading and Error States */
        .loading-container, .error-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 3rem 1rem;
          text-align: center;
        }

        .loading-spinner {
          width: 40px;
          height: 40px;
          border: 4px solid var(--billhive-loading-color, #f1f3f7);
          border-top: 4px solid var(--billhive-accent-color, #6576ff);
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 1rem;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .error-container {
          color: var(--billhive-error-color, #e85347);
          font-family: var(--billhive-font-family);
        }

        .error-icon {
          font-size: var(--billhive-font-size-heading, 0.8rem);
          margin-bottom: 1rem;
        }

        .error-container h3 {
          color: var(--billhive-text-color, #364a63);
          margin-bottom: 0.5rem;
          font-family: var(--billhive-font-family);
        }

        .retry-btn {
          margin-top: 1rem;
          padding: 0.5rem 1rem;
          background-color: var(--billhive-accent-color, #6576ff);
          color: var(--billhive-header-color, white);
          border: none;
          border-radius: var(--billhive-element-border-radius, 4px);
          cursor: pointer;
          font-size: var(--billhive-font-size-body-text, 0.65rem);
          font-family: var(--billhive-font-family);
          transition: all 0.2s ease;
        }

        .retry-btn:hover {
          background-color: var(--billhive-accent-hover, #5664e3);
          box-shadow: var(--billhive-button-shadow, 0 2px 4px rgba(101, 118, 255, 0.3));
        }
      </style>
    `}}return customElements.get("bh-pricing-cards-layout")===void 0&&customElements.define("bh-pricing-cards-layout",d),d}();
